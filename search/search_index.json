{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"FP/intro/","title":"FP","text":""},{"location":"OOP/intro/","title":"Intro","text":""},{"location":"OOP/intro/#first-class-functions","title":"First-class functions","text":"<p>Functions in Python are first-class objects.</p> <p>Functions in Python are first-class objects.</p> Reference <ul> <li>Fluent Python by Luciano Ramalho, pg:139</li> </ul>"},{"location":"OOP/intro/#higher-order-functions","title":"Higher-order functions","text":"<p>A function that takes a function as argument or returns a function as result is a higher-order function.</p> Reference <ul> <li>Fluent Python by Luciano Ramalho, pg:139</li> </ul>"},{"location":"OOP/intro/#inheritance","title":"Inheritance","text":"<p>There are three types of relationships between objects:</p> <ol> <li>association,</li> <li>composition,</li> <li>aggregation.</li> </ol> Reference <ul> <li>Python 3 Object-oriented Programming Second Edition by Dusty Phillips - pg: 14</li> </ul>"},{"location":"OOP/intro/#data-serialization","title":"Data Serialization","text":"<p>Data serialization is the concept of converting structured data into a format that allows it to be shared or stored\u2014retaining the information necessary to reconstruct the object in memory at the receiving end of the transmission (or upon read from storage).</p> <p>In some cases, the secondary intent of data serialization is to minimize the size of the serialized data, which then minimizes disk space or bandwidth requirements.</p> Reference <ul> <li>The Hitchhiker's Guide to Python by Kenneth Reitz &amp; Tanya Schlusser, pg:243</li> </ul>"},{"location":"OOP/intro/#python-data-type","title":"PYTHON DATA TYPE","text":"<p>Python comes with two helpful functions that assist you in exploring the language:</p> <ul> <li><code>dir(name)</code></li> <li><code>help(name)</code>.</li> </ul> <p><code>dir(name)</code> tells you all of the names available in the object identified by name.</p> <p>Python supports many powerful data types. Superficially, these look like their counterparts in other programming languages, but in Python they often come with super powers. Everything in Python is an object and, therefore, has methods. This means that you can perform a host of operations on any variable. The built-in <code>dir()</code> and <code>help()</code> functions will reveal all.</p> <p>You need to be aware of some underlying concepts in Python. First, Python variables are just names. You create variable names by assigning them to objects that are instances of types. Variables do not, of themselves, have a type; it is the object to which they are bound that has a type. The name is just a label and, as such, it can be reassigned to a completely different object. Assignment is performed using <code>=</code>, so assigning a value to a variable looks like this:</p> <pre><code>aVariable = aValue\n</code></pre> <p>This code binds the value aValue to the variable name aVariable and, if the name does not already exist, the interpreter adds the name to the appropriate namespace.</p> <p>The distinction between a variable and its underlying value (an object) is thus crucial in Python. You can test variables for equality using a double equal sign (<code>==</code>) and object identity (that is, if two names refer to the same object) is compared using the is operator, as shown:</p> <pre><code>&gt;&gt;&gt; aString = 'I love spam'\n&gt;&gt;&gt; anotherString = 'I love spam'\n\n&gt;&gt;&gt; anInt = 6\n&gt;&gt;&gt; intAlias = anInt\n&gt;&gt;&gt; aString == anotherString # test equality of value\nTrue\n&gt;&gt;&gt; aString is anotherString # test object identity\nFalse\n&gt;&gt;&gt; anInt == intAlias # same value\nTrue\n&gt;&gt;&gt; anInt is intAlias # also same object identity\nTrue\n</code></pre> <p>Python groups types according to how you can use them. For example, all types are either categorized as mutable or immutable. If a type is immutable, it means you can't change an object of that type once it's created. You can create a new data item and assign it to the same variable, but you cannot change the original immutable value.</p> <p>Python also supports several collection types, sometimes referred to as sequences.</p>"},{"location":"OOP/intro/#numeric-types-integer-and-float","title":"Numeric Types: Integer and Float","text":""},{"location":"OOP/intro/#the-boolean-type","title":"The Boolean Type","text":""},{"location":"OOP/intro/#the-none-type","title":"The None Type","text":"<p>The <code>None</code> type represents a <code>null</code> object. There is only one <code>None</code> object in the Python environment, and all references to None use that same single instance.</p>"},{"location":"OOP/intro/#collection-types","title":"Collection Types","text":"<p>As already mentioned Python has several types representing different kinds of <code>collections</code> or <code>sequences</code>. These are: <code>strings</code>, <code>bytes</code>, <code>tuples</code>, <code>lists</code>, <code>dictionaries</code> and <code>sets</code>.</p>"},{"location":"OOP/intro/#strings","title":"Strings","text":""},{"location":"OOP/intro/#bytes-and-bytearrays","title":"Bytes and ByteArrays","text":""},{"location":"OOP/intro/#tuples","title":"Tuples","text":""},{"location":"OOP/intro/#lists","title":"Lists","text":""},{"location":"OOP/intro/#dictionaries","title":"Dictionaries","text":""},{"location":"OOP/intro/#sets","title":"Sets","text":"Reference <ul> <li>Python Projects by Laura Cassel, Alan Gauld: pg-3</li> </ul>"},{"location":"OOP/intro/#class","title":"Class","text":"<p>The most basic idea of a class is that it encapsulates the behavior of an object, while an instance of the class represents the data for the object.</p> Reference <ul> <li>Pro Python by Marty Alchin: pg-103</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"paradigm/intro/","title":"Intro","text":""},{"location":"paradigm/intro/#paradigm","title":"Paradigm","text":""},{"location":"paradigm/intro/#paradigm-shift","title":"Paradigm shift","text":"<p>A person can change their paradigm, either slowly or all at once through an epiphany. You usually need a crisis to bring about an epiphany, so we prefer the first method. (1)</p> <ol> <li> <p>If you\u2019re used to object-oriented programming (OOP), then you\u2019ll be entering a new paradigm. FRP will appear a bit strange. We can claim all day that FRP is a simple idea, and it is. But simple and easy to understand aren\u2019t the same thing. The reality is that until your thinking slots into place, you will encounter some challenges.</p> <p>FRP rests on certain notions about what\u2019s important in programming that may go against your current understanding. Without these ideas, FRP is just a way of taking something that should be straightforward and doing it in an eccentric, limiting way. The claimed benefits will be remote.</p> <p>We\u2019re talking about standard functional programming ideas. If you\u2019ve done functional programming, it will be easier to learn FRP. If not, that\u2019s no problem. You don\u2019t need to know everything about functional programming to use FRP, and we\u2019ll teach you what you need to know.</p> <p>Functional Reactive Programming</p> </li> </ol>"},{"location":"paradigm/intro/#thinking-declaratively-what-the-program-is-not-what-it-does","title":"Thinking declaratively: what the program is, not what it does","text":"<p>In FRP we talk about working in the problem space rather than working in the machine space. Decades of software development have made the authors lazy. We don\u2019t want to add sequence information to our code if we don\u2019t have to. We\u2019ll only end up having to debug it.</p> <p>The sequence can be derived from dependencies, so you can write less code by leaving the sequence out altogether. You end up with a lot more \u201cwhat\u201d and a lot less \u201chow.\u201d</p> <p>This style is referred to as declarative programming: you tell the machine what the program is, not what it does. You directly describe things and the relationships between them.</p>"},{"location":"paradigm/intro/#misc-js","title":"MISC JS","text":"<p>can i console.log all web api exposed in browser</p> <p>You can\u2019t directly <code>console.log</code> all Web APIs exposed by the browser in one command, because they are part of the global environment (<code>window</code> object) and span hundreds of interfaces. However, you can inspect or iterate through the <code>window</code> object to see what\u2019s available. Here's how you can explore it:</p>"},{"location":"paradigm/intro/#view-all-properties-of-the-window-object-approximate-list-of-web-apis","title":"\ud83d\udd0d View all properties of the <code>window</code> object (approximate list of Web APIs):","text":"<pre><code>console.log(Object.getOwnPropertyNames(window));\n</code></pre> <p>This will log all enumerable and non-enumerable properties on the global window object \u2014 which includes a huge number of Web APIs (like <code>fetch</code>, <code>localStorage</code>, <code>WebSocket</code>, <code>IntersectionObserver</code>, etc.).</p>"},{"location":"paradigm/intro/#filter-only-functions-api-like","title":"\ud83e\udde0 Filter only functions (API-like):","text":"<pre><code>Object.getOwnPropertyNames(window).forEach((key) =&gt; {\n  if (typeof window[key] === \"function\") {\n    console.log(key);\n  }\n});\n</code></pre>"},{"location":"paradigm/intro/#example-list-all-global-classes-constructor-functions","title":"\ud83e\uddea Example: List all global classes (constructor functions)","text":"<pre><code>Object.getOwnPropertyNames(window).forEach((key) =&gt; {\n  try {\n    if (\n      typeof window[key] === \"function\" &amp;&amp;\n      /^\\s*class\\s+/.test(window[key].toString())\n    ) {\n      console.log(key);\n    }\n  } catch (e) {\n    // Ignore errors for restricted properties\n  }\n});\n</code></pre>"},{"location":"paradigm/intro/#tools-and-resources","title":"\ud83e\uddf0 Tools and Resources","text":"<p>If you're looking to systematically explore APIs:</p> <ul> <li>Use the MDN Web APIs Index to see documented APIs.</li> <li>Run <code>console.dir(window)</code> in DevTools and explore manually.</li> <li>Use browser extension tools like Web API Inspector or Lighthouse for runtime environment analysis.</li> </ul>"},{"location":"paradigm/intro/#limitations","title":"\ud83d\udeab Limitations","text":"<ul> <li>Some APIs are not exposed directly on <code>window</code> (e.g., <code>navigator.serviceWorker</code>).</li> <li>Some properties are browser-specific (Chrome vs Firefox vs Safari).</li> <li>Shadow realms and cross-origin restrictions can prevent full inspection.</li> </ul> <p>Would you like a categorized list (e.g., Storage APIs, DOM APIs, etc.) or help extracting them for a specific use case?</p>"},{"location":"paradigm/intro/#solved","title":"SOLVED","text":"<p><code>console.log(Object.getOwnPropertyNames(window));</code> can i see if formData is present in this</p> <p>Yes, <code>FormData</code> is a global Web API, and it will appear in the output of:</p> <pre><code>console.log(Object.getOwnPropertyNames(window));\n</code></pre> <p>However, the list is very long, so it can be hard to spot manually. To check specifically for <code>FormData</code>, you can do something like this:</p>"},{"location":"paradigm/intro/#check-if-formdata-exists","title":"\u2705 Check if FormData exists:","text":"<pre><code>if (\"FormData\" in window) {\n  console.log(\"FormData is available\");\n} else {\n  console.log(\"FormData is NOT available\");\n}\n</code></pre>"},{"location":"paradigm/intro/#or-filter-from-the-list","title":"\ud83d\udd0d Or filter from the list:","text":"<pre><code>const apis = Object.getOwnPropertyNames(window);\nconsole.log(apis.includes(\"FormData\")); // true or false\n</code></pre>"},{"location":"paradigm/intro/#confirm-its-a-constructor-function","title":"\ud83e\uddea Confirm it\u2019s a constructor (function):","text":"<pre><code>console.log(typeof window.FormData); // should be \"function\"\n</code></pre> <p>Or view the constructor:</p> <pre><code>console.log(window.FormData); // logs the FormData constructor\n</code></pre> <p>Let me know if you want to filter out all DOM-related or network-related APIs like <code>FormData</code>, <code>fetch</code>, <code>XMLHttpRequest</code>, etc.</p>"},{"location":"paradigm/intro/#filter-out-all-dom-related-only","title":"filter out all DOM-related only","text":"<p>To filter out only DOM-related APIs from <code>window</code>, you can look for constructors and objects that are part of the DOM specification.</p>"},{"location":"paradigm/intro/#heres-a-basic-way-to-filter-dom-related-apis","title":"\u2705 Here's a basic way to filter DOM-related APIs:","text":"<pre><code>const domApis = Object.getOwnPropertyNames(window).filter((name) =&gt; {\n  try {\n    const val = window[name];\n    return (\n      typeof val === \"function\" &amp;&amp;\n      // Check if it's a class or function related to DOM\n      (val.prototype instanceof Node ||\n        val.prototype instanceof EventTarget ||\n        val.prototype instanceof HTMLElement)\n    );\n  } catch (e) {\n    // Ignore properties that throw on access\n    return false;\n  }\n});\n\nconsole.log(domApis);\n</code></pre> <p>\ud83d\udca1 What this does:</p> <ul> <li> <p>It checks if the global property is a function (constructor).</p> </li> <li> <p>Then it tests if it inherits from <code>Node</code>, <code>EventTarget</code>, or <code>HTMLElement</code>, which are base classes for DOM elements.</p> </li> <li> <p>This captures DOM interfaces like <code>HTMLDivElement</code>, <code>Document</code>, <code>Element</code>, <code>Event</code>, etc.</p> </li> </ul> <p>\ud83d\udcdd Example output (browser-dependent):</p> <pre><code>[\n  \"Element\",\n  \"HTMLElement\",\n  \"Document\",\n  \"Node\",\n  \"Text\",\n  \"Comment\",\n  \"HTMLDivElement\",\n  \"HTMLInputElement\",\n  \"HTMLFormElement\",\n  \"Event\",\n  \"MouseEvent\",\n  \"KeyboardEvent\",\n  ...\n]\n</code></pre> <p>Would you like to extend this to include style-related APIs (like <code>CSSStyleDeclaration</code>) or interaction APIs (like <code>MutationObserver</code>, <code>IntersectionObserver</code>)?</p>"},{"location":"paradigm/intro/#filter-out-all-network-related-apis-only","title":"filter out all network-related APIs only","text":""}]}